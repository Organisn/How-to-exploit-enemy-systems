const express = require('express');
const Pool = require('pg-pool');
const path = require('path');
const app = express();

const appPort = 3000;
// Retrieve connestion details from .env working directory file
// Read Readme guide for setup details
const pool = new Pool({
  host: process.env.HOST,
  database: process.env.DATABASE,
  user: process.env.USER,
  password: process.env.PASSWORD,
  port: process.env.PORT, // not required to be Number
  ssl: true,
  max: 1, // set pool max size to 1
  idleTimeoutMillis: 1000, // close idle clients after 1 second
  connectionTimeoutMillis: 1000, // return an error after 1 second if connection could not be established
  maxUses: 7500, // close (and replace) a connection after it has been used 7500 times
})

// Create and populate db tables
// CHARACTERS
var text = `CREATE TABLE IF NOT EXISTS characters (
  username varchar(255) NOT NULL,
  password varchar(255) NOT NULL,
  firstname varchar(255) DEFAULT NULL,
  lastname varchar(255) DEFAULT NULL,
  PRIMARY KEY (username,password)
  )`;
pool.query(text);
text = `INSERT INTO characters VALUES
  ('u', 'p', 'yaroslay', 'karashenko'),
  ('us', 'pa', 'nikolay', 'karashova'),
  ('un', 'pw', 'alexey', 'karamov'),
  ('ue', 'pd', 'yury', 'karashnikov') ON CONFLICT DO NOTHING RETURNING *`;
var results = pool.query(text).rows;
console.log('CHARACTERS:\n\n');
for (let index = 0; index < results.length; index++)
  console.log(`${results[index]}\n\n`);
// STUFFS
text = `CREATE TABLE IF NOT EXISTS stuffs (
  title varchar(255) NOT NULL,
  legality boolean NOT NULL,
  PRIMARY KEY (title)
  )`;
pool.query(text);
text = `INSERT INTO stuffs VALUES
  ('estrazione materie prime', 1),
  ('evasione fiscale', 0),
  ('frode', 0),
  ('corruzione', 0),
  ('riciclaggio denaro', 0),
  ('politica', 1),
  ('finanza', 1),
  ('industria', 1) ON CONFLICT DO NOTHING RETURNING *`;
results = pool.query(text).rows;
console.log(`STUFFS:\n\n${results}\n\n`);
//INVOLVEMENTS
text = `CREATE TABLE IF NOT EXISTS involvements (
  stuff_id varchar(255) NOT NULL,
  character_username varchar(255) NOT NULL,
  character_password varchar(255) NOT NULL,
  FOREIGN KEY (character_username,character_password) REFERENCES characters (username, password) ON DELETE CASCADE ON UPDATE CASCADE,
  PRIMARY KEY (stuff_id,character_username,character_password)
  )`;
pool.query(text);
text = `INSERT INTO involvements VALUES
  ('corruzione', 'ue', 'pd'),
  ('estrazione materie prime', 'us', 'pa'),
  ('evasione fiscale', 'u', 'p'),
  ('finanza', 'un', 'pw'),
  ('frode', 'un', 'pw'),
  ('industria', 'u', 'p'),
  ('politica', 'us', 'pa'),
  ('riciclaggio denaro', 'ue', 'pd') ON CONFLICT DO NOTHING RETURNING *`;
results = pool.query(text).rows;
console.log(`INVOLVEMENTS:\n\n${results}\n\n`);

app.use(express.static(path.join(__dirname,'\\web')));

// JSON body-parser already included in express.js
app.use(express.urlencoded({
  extended: true
}));

// Home page route
app.get('/', (res) => {
  res.sendFile(path.join(__dirname, '\\web\\accesso.html'));
});

app.post('/characters/:id', async function(req, res) { 
  text = `SELECT o.firstname, o.lastname, s.title FROM characters o 
      JOIN involvements i ON i.character_username = o.username AND i.character_password = o.password
      JOIN stuffs s ON s.title = i.stuff_id 
      WHERE o.username = $1 AND o.password = $2 AND s.legality = 1`;
  var values = [req.body.username, req.body.password];
  // Query results as objects array
  results = await pool.query(text, values).rows;
  console.log(results);
  // HTML result page
  var toPrint = `<html><head><title>Results</title></head><body><center><br><h2>Available infos</h2>`;
  if (results.length > 0) 
    for (let index = 0; index < results.length; index++) {
      const row = results[index];
      if (index == 0) 
        toPrint += `
          <p>Firstname: ${row.firstname}</p>
          <p>Lastname: ${row.lastname}</p>
          <p>Activities:</p>
        `;
      toPrint += `<p>=> ${row.title}</p>`;
    }

  else 
    toPrint += `<p>Unregistered profile</p><br>`;

  toPrint += `<a href="/">New Access</a></center></body></html>`;
  res.send(toPrint);
});

const server = app.listen(appPort, () => {
  console.log(`App listening at http://127.0.0.1:${appPort}\nCTRL + C to terminate`);
});

// Gracefully close connection pool and server before process kill
process.on('SIGTERM', shutDown);
process.on('SIGINT', shutDown);

function shutDown() {
  console.log(`Kill signal received: ending pg connection pool...`);
  pool.end();
  console.log('... and app itself');
  server.close(() => {
    console.log('HTTP server closed!');
  });
}